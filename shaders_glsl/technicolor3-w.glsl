// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
vec4 _oPosition1;
vec4 _r0005;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _oTex;
    _r0005 = VertexCoord.x*MVPMatrix[0];
    _r0005 = _r0005 + VertexCoord.y*MVPMatrix[1];
    _r0005 = _r0005 + VertexCoord.z*MVPMatrix[2];
    _r0005 = _r0005 + VertexCoord.w*MVPMatrix[3];
    _oPosition1 = _r0005;
    _oTex = TexCoord.xy;
    gl_Position = _r0005;
    TEX0.xy = TexCoord.xy;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
uniform sampler2D Texture;
vec4 _TMP3;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec4 _input_dummy0;
    vec4 _greenrecord;
    vec4 _bluerecord;
    vec4 _redrecord;
    vec4 _rednegative;
    vec4 _greennegative;
    vec4 _bluenegative;
    vec4 _redoutput_dummy;
    vec4 _greenoutput_dummy;
    vec4 _blueoutput_dummy;
    vec4 _result;
    _input_dummy0 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _greenrecord = _input_dummy0*vec4( 0.00000000E+000, 1.00000000E+000, 0.00000000E+000, 0.00000000E+000);
    _bluerecord = _input_dummy0*vec4( 1.00000000E+000, 0.00000000E+000, 1.00000000E+000, 0.00000000E+000);
    _redrecord = _input_dummy0*vec4( 9.90000010E-001, 2.63000011E-001, 0.00000000E+000, 0.00000000E+000);
    _rednegative = vec4((_redrecord.x + _redrecord.y + _redrecord.z)/3.00000000E+000, (_redrecord.x + _redrecord.y + _redrecord.z)/3.00000000E+000, (_redrecord.x + _redrecord.y + _redrecord.z)/3.00000000E+000, (_redrecord.x + _redrecord.y + _redrecord.z)/3.00000000E+000);
    _greennegative = vec4((_greenrecord.x + _greenrecord.y + _greenrecord.z)/3.00000000E+000, (_greenrecord.x + _greenrecord.y + _greenrecord.z)/3.00000000E+000, (_greenrecord.x + _greenrecord.y + _greenrecord.z)/3.00000000E+000, (_greenrecord.x + _greenrecord.y + _greenrecord.z)/3.00000000E+000);
    _bluenegative = vec4((_bluerecord.x + _bluerecord.y + _bluerecord.z)/3.00000000E+000, (_bluerecord.x + _bluerecord.y + _bluerecord.z)/3.00000000E+000, (_bluerecord.x + _bluerecord.y + _bluerecord.z)/3.00000000E+000, (_bluerecord.x + _bluerecord.y + _bluerecord.z)/3.00000000E+000);
    _redoutput_dummy = _rednegative + vec4( 0.00000000E+000, 1.00000000E+000, 1.00000000E+000, 0.00000000E+000);
    _greenoutput_dummy = _greennegative + vec4( 1.00000000E+000, 0.00000000E+000, 1.00000000E+000, 0.00000000E+000);
    _blueoutput_dummy = _bluenegative + vec4( 1.00000000E+000, 1.00000000E+000, 0.00000000E+000, 0.00000000E+000);
    _result = _redoutput_dummy*_greenoutput_dummy*_blueoutput_dummy;
    _TMP3 = _input_dummy0 + 5.00000000E-001*(_result - _input_dummy0);
    FragColor = _TMP3;
    return;
} 
#endif
