// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
vec4 _oPosition1;
vec4 _r0005;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _oTex;
    _r0005 = VertexCoord.x*MVPMatrix[0];
    _r0005 = _r0005 + VertexCoord.y*MVPMatrix[1];
    _r0005 = _r0005 + VertexCoord.z*MVPMatrix[2];
    _r0005 = _r0005 + VertexCoord.w*MVPMatrix[3];
    _oPosition1 = _r0005;
    _oTex = TexCoord.xy;
    gl_Position = _r0005;
    TEX0.xy = TexCoord.xy;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
uniform sampler2D Texture;
vec4 _TMP3;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec4 _input_dummy0;
    vec3 _redmatte;
    vec3 _greenmatte;
    vec3 _bluematte;
    vec3 _red;
    vec3 _green;
    vec3 _blue;
    vec4 _result;
    _input_dummy0 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _redmatte = vec3(_input_dummy0.x - (_input_dummy0.y + _input_dummy0.z)/2.00000000E+000, _input_dummy0.x - (_input_dummy0.y + _input_dummy0.z)/2.00000000E+000, _input_dummy0.x - (_input_dummy0.y + _input_dummy0.z)/2.00000000E+000);
    _greenmatte = vec3(_input_dummy0.y - (_input_dummy0.x + _input_dummy0.z)/2.00000000E+000, _input_dummy0.y - (_input_dummy0.x + _input_dummy0.z)/2.00000000E+000, _input_dummy0.y - (_input_dummy0.x + _input_dummy0.z)/2.00000000E+000);
    _bluematte = vec3(_input_dummy0.z - (_input_dummy0.x + _input_dummy0.y)/2.00000000E+000, _input_dummy0.z - (_input_dummy0.x + _input_dummy0.y)/2.00000000E+000, _input_dummy0.z - (_input_dummy0.x + _input_dummy0.y)/2.00000000E+000);
    _redmatte = 1.00000000E+000 - _redmatte;
    _greenmatte = 1.00000000E+000 - _greenmatte;
    _bluematte = 1.00000000E+000 - _bluematte;
    _red = (_greenmatte*_bluematte)*_input_dummy0.x;
    _green = (_redmatte*_bluematte)*_input_dummy0.y;
    _blue = (_redmatte*_greenmatte)*_input_dummy0.z;
    _result = vec4(_red.x, _green.y, _blue.z, _input_dummy0.w);
    _TMP3 = _input_dummy0 + 5.00000000E-001*(_result - _input_dummy0);
    FragColor = _TMP3;
    return;
} 
#endif
